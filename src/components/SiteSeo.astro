---
import { SEO, type SEOProps } from 'astro-seo'
import { getImage } from 'astro:assets'
import { themeConfig } from '~/config'
import type { SupportedLanguage } from '~/config'
import type { Meta } from 'astro-seo' // 确保导入 Meta 类型

interface Props {
  title?: string
  desc?: string
  banner?: ImageMetadata
}

const props = Astro.props
const configSEO = themeConfig.seo
const configSite = themeConfig.site

const title = props.title ?? configSite.title
const desc = props.desc ?? configSite.description
const canonical = configSite.website
const twitter = configSEO.twitter

const { lang } = Astro.params as { lang: string }
const languages = ['zh', 'en', 'es', 'ru', 'ja']

const description =
  typeof desc === 'string'
    ? desc
    : (desc as Record<SupportedLanguage, string>)?.[lang as SupportedLanguage] ||
      (desc as Record<SupportedLanguage, string>)?.['en']

const rss = new URL('/atom.xml', Astro.site).toString()
const optimizedImage = await getOptimizedImageURL()

const languageLinks = languages.map((l) => ({
  rel: 'alternate',
  hrefLang: l,
  href: new URL(Astro.url.pathname.replace(`/${lang}/`, `/${l}/`), Astro.site).toString(),
}))

const seoLinks = [
  { rel: 'icon', href: '/favicon.svg', type: 'image/svg+xml' },
  {
    rel: 'alternate',
    type: 'application/rss+xml',
    title: themeConfig.site.title,
    href: `/${lang}/atom.xml`,
  },
  ...languageLinks,
  ...configSEO.link,
]

const seoMeta: Partial<Meta>[] = [
  { name: 'viewport', content: 'width=device-width' },
  { name: 'generator', content: Astro.generator },
  { name: 'language', content: lang },
  { name: 'twitter:image:src', content: optimizedImage },
  { name: 'twitter:image:alt', content: description },
  { name: 'twitter:creator', content: twitter },
  { name: 'twitter:site', content: twitter },
  { name: 'twitter:card', content: 'summary_large_image' },
  { name: 'twitter:title', content: title },
  { name: 'twitter:description', content: description },
  ...configSEO.meta,
]

const openGraph: SEOProps['openGraph'] = {
  basic: {
    title: title,
    type: 'article',
    image: optimizedImage,
    url: canonical,
  },
}

async function getOptimizedImageURL() {
  const image = props.banner && (await getImage({ src: props.banner, format: 'jpeg' }))
  return new URL(image?.src ?? '/placeholder.png', Astro.url).toString()
}
---

<SEO
  charset="utf-8"
  title={title}
  description={description}
  extend={{ link: seoLinks, meta: seoMeta }}
  openGraph={openGraph}
/>
